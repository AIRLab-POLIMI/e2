/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosGetObjectGroupData.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSGETOBJECTGROUPDATA_H
#define VREP_COMMON_SERVICE_SIMROSGETOBJECTGROUPDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosGetObjectGroupDataRequest_ {
  typedef simRosGetObjectGroupDataRequest_<ContainerAllocator> Type;

  simRosGetObjectGroupDataRequest_()
  : objectType(0)
  , dataType(0)
  {
  }

  simRosGetObjectGroupDataRequest_(const ContainerAllocator& _alloc)
  : objectType(0)
  , dataType(0)
  {
  }

  typedef int32_t _objectType_type;
  int32_t objectType;

  typedef int32_t _dataType_type;
  int32_t dataType;


  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetObjectGroupDataRequest
typedef  ::vrep_common::simRosGetObjectGroupDataRequest_<std::allocator<void> > simRosGetObjectGroupDataRequest;

typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataRequest> simRosGetObjectGroupDataRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataRequest const> simRosGetObjectGroupDataRequestConstPtr;


template <class ContainerAllocator>
struct simRosGetObjectGroupDataResponse_ {
  typedef simRosGetObjectGroupDataResponse_<ContainerAllocator> Type;

  simRosGetObjectGroupDataResponse_()
  : handles()
  , intData()
  , floatData()
  , strings()
  {
  }

  simRosGetObjectGroupDataResponse_(const ContainerAllocator& _alloc)
  : handles(_alloc)
  , intData(_alloc)
  , floatData(_alloc)
  , strings(_alloc)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _handles_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  handles;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _intData_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  intData;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _floatData_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  floatData;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _strings_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  strings;


  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetObjectGroupDataResponse
typedef  ::vrep_common::simRosGetObjectGroupDataResponse_<std::allocator<void> > simRosGetObjectGroupDataResponse;

typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataResponse> simRosGetObjectGroupDataResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetObjectGroupDataResponse const> simRosGetObjectGroupDataResponseConstPtr;

struct simRosGetObjectGroupData
{

typedef simRosGetObjectGroupDataRequest Request;
typedef simRosGetObjectGroupDataResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosGetObjectGroupData
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f25e144fb8e81818d3b3ee5f47698859";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf25e144fb8e81818ULL;
  static const uint64_t static_value2 = 0xd3b3ee5f47698859ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectGroupDataRequest";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 objectType\n\
int32 dataType\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "072add4d453cc4563363975eb4c48cf2";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x072add4d453cc456ULL;
  static const uint64_t static_value2 = 0x3363975eb4c48cf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectGroupDataResponse";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] handles\n\
int32[] intData\n\
float32[] floatData\n\
string[] strings\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.objectType);
    stream.next(m.dataType);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetObjectGroupDataRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handles);
    stream.next(m.intData);
    stream.next(m.floatData);
    stream.next(m.strings);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetObjectGroupDataResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosGetObjectGroupData> {
  static const char* value() 
  {
    return "8d0534a840a5e37715f425228506250e";
  }

  static const char* value(const vrep_common::simRosGetObjectGroupData&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosGetObjectGroupData> {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectGroupData";
  }

  static const char* value(const vrep_common::simRosGetObjectGroupData&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8d0534a840a5e37715f425228506250e";
  }

  static const char* value(const vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectGroupData";
  }

  static const char* value(const vrep_common::simRosGetObjectGroupDataRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8d0534a840a5e37715f425228506250e";
  }

  static const char* value(const vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectGroupData";
  }

  static const char* value(const vrep_common::simRosGetObjectGroupDataResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSGETOBJECTGROUPDATA_H

