/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosSetArrayParameter.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSSETARRAYPARAMETER_H
#define VREP_COMMON_SERVICE_SIMROSSETARRAYPARAMETER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosSetArrayParameterRequest_ {
  typedef simRosSetArrayParameterRequest_<ContainerAllocator> Type;

  simRosSetArrayParameterRequest_()
  : parameter(0)
  , parameterValues()
  {
  }

  simRosSetArrayParameterRequest_(const ContainerAllocator& _alloc)
  : parameter(0)
  , parameterValues(_alloc)
  {
  }

  typedef int32_t _parameter_type;
  int32_t parameter;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _parameterValues_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  parameterValues;


  typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosSetArrayParameterRequest
typedef  ::vrep_common::simRosSetArrayParameterRequest_<std::allocator<void> > simRosSetArrayParameterRequest;

typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterRequest> simRosSetArrayParameterRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterRequest const> simRosSetArrayParameterRequestConstPtr;


template <class ContainerAllocator>
struct simRosSetArrayParameterResponse_ {
  typedef simRosSetArrayParameterResponse_<ContainerAllocator> Type;

  simRosSetArrayParameterResponse_()
  : result(0)
  {
  }

  simRosSetArrayParameterResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosSetArrayParameterResponse
typedef  ::vrep_common::simRosSetArrayParameterResponse_<std::allocator<void> > simRosSetArrayParameterResponse;

typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterResponse> simRosSetArrayParameterResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosSetArrayParameterResponse const> simRosSetArrayParameterResponseConstPtr;

struct simRosSetArrayParameter
{

typedef simRosSetArrayParameterRequest Request;
typedef simRosSetArrayParameterResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosSetArrayParameter
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5d2ff3aea97ae3d86be296a72ec9a583";
  }

  static const char* value(const  ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5d2ff3aea97ae3d8ULL;
  static const uint64_t static_value2 = 0x6be296a72ec9a583ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetArrayParameterRequest";
  }

  static const char* value(const  ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 parameter\n\
float32[] parameterValues\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetArrayParameterResponse";
  }

  static const char* value(const  ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.parameter);
    stream.next(m.parameterValues);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosSetArrayParameterRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosSetArrayParameterResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosSetArrayParameter> {
  static const char* value() 
  {
    return "4d1073567d098840261016d80dc91684";
  }

  static const char* value(const vrep_common::simRosSetArrayParameter&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosSetArrayParameter> {
  static const char* value() 
  {
    return "vrep_common/simRosSetArrayParameter";
  }

  static const char* value(const vrep_common::simRosSetArrayParameter&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d1073567d098840261016d80dc91684";
  }

  static const char* value(const vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetArrayParameter";
  }

  static const char* value(const vrep_common::simRosSetArrayParameterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d1073567d098840261016d80dc91684";
  }

  static const char* value(const vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetArrayParameter";
  }

  static const char* value(const vrep_common::simRosSetArrayParameterResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSSETARRAYPARAMETER_H

