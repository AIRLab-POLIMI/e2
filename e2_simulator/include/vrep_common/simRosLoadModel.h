/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosLoadModel.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSLOADMODEL_H
#define VREP_COMMON_SERVICE_SIMROSLOADMODEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosLoadModelRequest_ {
  typedef simRosLoadModelRequest_<ContainerAllocator> Type;

  simRosLoadModelRequest_()
  : fileName()
  {
  }

  simRosLoadModelRequest_(const ContainerAllocator& _alloc)
  : fileName(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  fileName;


  typedef boost::shared_ptr< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosLoadModelRequest
typedef  ::vrep_common::simRosLoadModelRequest_<std::allocator<void> > simRosLoadModelRequest;

typedef boost::shared_ptr< ::vrep_common::simRosLoadModelRequest> simRosLoadModelRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosLoadModelRequest const> simRosLoadModelRequestConstPtr;


template <class ContainerAllocator>
struct simRosLoadModelResponse_ {
  typedef simRosLoadModelResponse_<ContainerAllocator> Type;

  simRosLoadModelResponse_()
  : result(0)
  , baseHandle(0)
  {
  }

  simRosLoadModelResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , baseHandle(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef int32_t _baseHandle_type;
  int32_t baseHandle;


  typedef boost::shared_ptr< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosLoadModelResponse
typedef  ::vrep_common::simRosLoadModelResponse_<std::allocator<void> > simRosLoadModelResponse;

typedef boost::shared_ptr< ::vrep_common::simRosLoadModelResponse> simRosLoadModelResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosLoadModelResponse const> simRosLoadModelResponseConstPtr;

struct simRosLoadModel
{

typedef simRosLoadModelRequest Request;
typedef simRosLoadModelResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosLoadModel
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c96d4662a80949a4927729271153923";
  }

  static const char* value(const  ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c96d4662a80949aULL;
  static const uint64_t static_value2 = 0x4927729271153923ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadModelRequest";
  }

  static const char* value(const  ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
string fileName\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e49038cfdf66770b813aa3b2dae39cef";
  }

  static const char* value(const  ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe49038cfdf66770bULL;
  static const uint64_t static_value2 = 0x813aa3b2dae39cefULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadModelResponse";
  }

  static const char* value(const  ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
int32 baseHandle\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosLoadModelRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fileName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosLoadModelRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosLoadModelResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.baseHandle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosLoadModelResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosLoadModel> {
  static const char* value() 
  {
    return "e90a06de566d298ef7f6c1c63b525a29";
  }

  static const char* value(const vrep_common::simRosLoadModel&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosLoadModel> {
  static const char* value() 
  {
    return "vrep_common/simRosLoadModel";
  }

  static const char* value(const vrep_common::simRosLoadModel&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosLoadModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e90a06de566d298ef7f6c1c63b525a29";
  }

  static const char* value(const vrep_common::simRosLoadModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosLoadModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadModel";
  }

  static const char* value(const vrep_common::simRosLoadModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosLoadModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e90a06de566d298ef7f6c1c63b525a29";
  }

  static const char* value(const vrep_common::simRosLoadModelResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosLoadModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadModel";
  }

  static const char* value(const vrep_common::simRosLoadModelResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSLOADMODEL_H

