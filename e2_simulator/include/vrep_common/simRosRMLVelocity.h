/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosRMLVelocity.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSRMLVELOCITY_H
#define VREP_COMMON_SERVICE_SIMROSRMLVELOCITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosRMLVelocityRequest_ {
  typedef simRosRMLVelocityRequest_<ContainerAllocator> Type;

  simRosRMLVelocityRequest_()
  : dofs(0)
  , timeStep(0.0)
  , flags(0)
  , currentPosVelAccel()
  , maxAccelJerk()
  , selection()
  , targetVel()
  {
  }

  simRosRMLVelocityRequest_(const ContainerAllocator& _alloc)
  : dofs(0)
  , timeStep(0.0)
  , flags(0)
  , currentPosVelAccel(_alloc)
  , maxAccelJerk(_alloc)
  , selection(_alloc)
  , targetVel(_alloc)
  {
  }

  typedef int32_t _dofs_type;
  int32_t dofs;

  typedef double _timeStep_type;
  double timeStep;

  typedef int32_t _flags_type;
  int32_t flags;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _currentPosVelAccel_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  currentPosVelAccel;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _maxAccelJerk_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  maxAccelJerk;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _selection_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  selection;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _targetVel_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  targetVel;


  typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosRMLVelocityRequest
typedef  ::vrep_common::simRosRMLVelocityRequest_<std::allocator<void> > simRosRMLVelocityRequest;

typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityRequest> simRosRMLVelocityRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityRequest const> simRosRMLVelocityRequestConstPtr;


template <class ContainerAllocator>
struct simRosRMLVelocityResponse_ {
  typedef simRosRMLVelocityResponse_<ContainerAllocator> Type;

  simRosRMLVelocityResponse_()
  : result(0)
  , newPosVelAccel()
  {
  }

  simRosRMLVelocityResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , newPosVelAccel(_alloc)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _newPosVelAccel_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  newPosVelAccel;


  typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosRMLVelocityResponse
typedef  ::vrep_common::simRosRMLVelocityResponse_<std::allocator<void> > simRosRMLVelocityResponse;

typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityResponse> simRosRMLVelocityResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosRMLVelocityResponse const> simRosRMLVelocityResponseConstPtr;

struct simRosRMLVelocity
{

typedef simRosRMLVelocityRequest Request;
typedef simRosRMLVelocityResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosRMLVelocity
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ea98f1ee62dc3389f2a3decf5ab78f5";
  }

  static const char* value(const  ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3ea98f1ee62dc338ULL;
  static const uint64_t static_value2 = 0x9f2a3decf5ab78f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosRMLVelocityRequest";
  }

  static const char* value(const  ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 dofs\n\
float64 timeStep\n\
int32 flags\n\
float64[] currentPosVelAccel\n\
float64[] maxAccelJerk\n\
uint8[] selection\n\
float64[] targetVel\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c60aeff05e58a47d8d5ec6ccf1dfd343";
  }

  static const char* value(const  ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc60aeff05e58a47dULL;
  static const uint64_t static_value2 = 0x8d5ec6ccf1dfd343ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosRMLVelocityResponse";
  }

  static const char* value(const  ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
float64[] newPosVelAccel\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dofs);
    stream.next(m.timeStep);
    stream.next(m.flags);
    stream.next(m.currentPosVelAccel);
    stream.next(m.maxAccelJerk);
    stream.next(m.selection);
    stream.next(m.targetVel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosRMLVelocityRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.newPosVelAccel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosRMLVelocityResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosRMLVelocity> {
  static const char* value() 
  {
    return "fc495a182f1a28ef599eec5305416a32";
  }

  static const char* value(const vrep_common::simRosRMLVelocity&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosRMLVelocity> {
  static const char* value() 
  {
    return "vrep_common/simRosRMLVelocity";
  }

  static const char* value(const vrep_common::simRosRMLVelocity&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc495a182f1a28ef599eec5305416a32";
  }

  static const char* value(const vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosRMLVelocity";
  }

  static const char* value(const vrep_common::simRosRMLVelocityRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc495a182f1a28ef599eec5305416a32";
  }

  static const char* value(const vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosRMLVelocity";
  }

  static const char* value(const vrep_common::simRosRMLVelocityResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSRMLVELOCITY_H

