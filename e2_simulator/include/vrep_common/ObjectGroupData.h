/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/msg/ObjectGroupData.msg */
#ifndef VREP_COMMON_MESSAGE_OBJECTGROUPDATA_H
#define VREP_COMMON_MESSAGE_OBJECTGROUPDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Int32MultiArray.h"
#include "std_msgs/Int32MultiArray.h"
#include "std_msgs/Float32MultiArray.h"
#include "std_msgs/String.h"

namespace vrep_common
{
template <class ContainerAllocator>
struct ObjectGroupData_ {
  typedef ObjectGroupData_<ContainerAllocator> Type;

  ObjectGroupData_()
  : handles()
  , intData()
  , floatData()
  , stringData()
  {
  }

  ObjectGroupData_(const ContainerAllocator& _alloc)
  : handles(_alloc)
  , intData(_alloc)
  , floatData(_alloc)
  , stringData(_alloc)
  {
  }

  typedef  ::std_msgs::Int32MultiArray_<ContainerAllocator>  _handles_type;
   ::std_msgs::Int32MultiArray_<ContainerAllocator>  handles;

  typedef  ::std_msgs::Int32MultiArray_<ContainerAllocator>  _intData_type;
   ::std_msgs::Int32MultiArray_<ContainerAllocator>  intData;

  typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _floatData_type;
   ::std_msgs::Float32MultiArray_<ContainerAllocator>  floatData;

  typedef  ::std_msgs::String_<ContainerAllocator>  _stringData_type;
   ::std_msgs::String_<ContainerAllocator>  stringData;


  typedef boost::shared_ptr< ::vrep_common::ObjectGroupData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::ObjectGroupData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ObjectGroupData
typedef  ::vrep_common::ObjectGroupData_<std::allocator<void> > ObjectGroupData;

typedef boost::shared_ptr< ::vrep_common::ObjectGroupData> ObjectGroupDataPtr;
typedef boost::shared_ptr< ::vrep_common::ObjectGroupData const> ObjectGroupDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrep_common::ObjectGroupData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrep_common::ObjectGroupData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::ObjectGroupData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::ObjectGroupData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::ObjectGroupData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d73f2682eafdfd3c477ba05ceeae1ada";
  }

  static const char* value(const  ::vrep_common::ObjectGroupData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd73f2682eafdfd3cULL;
  static const uint64_t static_value2 = 0x477ba05ceeae1adaULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::ObjectGroupData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/ObjectGroupData";
  }

  static const char* value(const  ::vrep_common::ObjectGroupData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::ObjectGroupData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Int32MultiArray handles\n\
std_msgs/Int32MultiArray intData\n\
std_msgs/Float32MultiArray floatData\n\
std_msgs/String stringData\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
int32[]           data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
================================================================================\n\
MSG: std_msgs/Float32MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float32[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::ObjectGroupData_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::ObjectGroupData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handles);
    stream.next(m.intData);
    stream.next(m.floatData);
    stream.next(m.stringData);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObjectGroupData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::ObjectGroupData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrep_common::ObjectGroupData_<ContainerAllocator> & v) 
  {
    s << indent << "handles: ";
s << std::endl;
    Printer< ::std_msgs::Int32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.handles);
    s << indent << "intData: ";
s << std::endl;
    Printer< ::std_msgs::Int32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.intData);
    s << indent << "floatData: ";
s << std::endl;
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.floatData);
    s << indent << "stringData: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.stringData);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_OBJECTGROUPDATA_H

