/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosCreateDummy.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSCREATEDUMMY_H
#define VREP_COMMON_SERVICE_SIMROSCREATEDUMMY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosCreateDummyRequest_ {
  typedef simRosCreateDummyRequest_<ContainerAllocator> Type;

  simRosCreateDummyRequest_()
  : size(0.0)
  , colors()
  {
  }

  simRosCreateDummyRequest_(const ContainerAllocator& _alloc)
  : size(0.0)
  , colors(_alloc)
  {
  }

  typedef float _size_type;
  float size;

  typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _colors_type;
  std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  colors;


  typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosCreateDummyRequest
typedef  ::vrep_common::simRosCreateDummyRequest_<std::allocator<void> > simRosCreateDummyRequest;

typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyRequest> simRosCreateDummyRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyRequest const> simRosCreateDummyRequestConstPtr;


template <class ContainerAllocator>
struct simRosCreateDummyResponse_ {
  typedef simRosCreateDummyResponse_<ContainerAllocator> Type;

  simRosCreateDummyResponse_()
  : dummyHandle(0)
  {
  }

  simRosCreateDummyResponse_(const ContainerAllocator& _alloc)
  : dummyHandle(0)
  {
  }

  typedef int32_t _dummyHandle_type;
  int32_t dummyHandle;


  typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosCreateDummyResponse
typedef  ::vrep_common::simRosCreateDummyResponse_<std::allocator<void> > simRosCreateDummyResponse;

typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyResponse> simRosCreateDummyResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosCreateDummyResponse const> simRosCreateDummyResponseConstPtr;

struct simRosCreateDummy
{

typedef simRosCreateDummyRequest Request;
typedef simRosCreateDummyResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosCreateDummy
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8b8d31e0e18b916960ddd10248b87e65";
  }

  static const char* value(const  ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8b8d31e0e18b9169ULL;
  static const uint64_t static_value2 = 0x60ddd10248b87e65ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCreateDummyRequest";
  }

  static const char* value(const  ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
float32 size\n\
int8[] colors\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fce6fe642297751ba64c68708ffe9e6f";
  }

  static const char* value(const  ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfce6fe642297751bULL;
  static const uint64_t static_value2 = 0xa64c68708ffe9e6fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCreateDummyResponse";
  }

  static const char* value(const  ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 dummyHandle\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosCreateDummyRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.size);
    stream.next(m.colors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosCreateDummyRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosCreateDummyResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dummyHandle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosCreateDummyResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosCreateDummy> {
  static const char* value() 
  {
    return "ca160749088e63e26f75d439232c561a";
  }

  static const char* value(const vrep_common::simRosCreateDummy&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosCreateDummy> {
  static const char* value() 
  {
    return "vrep_common/simRosCreateDummy";
  }

  static const char* value(const vrep_common::simRosCreateDummy&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca160749088e63e26f75d439232c561a";
  }

  static const char* value(const vrep_common::simRosCreateDummyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosCreateDummyRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCreateDummy";
  }

  static const char* value(const vrep_common::simRosCreateDummyRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca160749088e63e26f75d439232c561a";
  }

  static const char* value(const vrep_common::simRosCreateDummyResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosCreateDummyResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCreateDummy";
  }

  static const char* value(const vrep_common::simRosCreateDummyResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSCREATEDUMMY_H

