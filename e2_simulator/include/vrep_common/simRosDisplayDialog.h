/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosDisplayDialog.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSDISPLAYDIALOG_H
#define VREP_COMMON_SERVICE_SIMROSDISPLAYDIALOG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosDisplayDialogRequest_ {
  typedef simRosDisplayDialogRequest_<ContainerAllocator> Type;

  simRosDisplayDialogRequest_()
  : titleText()
  , mainText()
  , dialogType(0)
  , initialText()
  , titleColors()
  , dialogColors()
  {
  }

  simRosDisplayDialogRequest_(const ContainerAllocator& _alloc)
  : titleText(_alloc)
  , mainText(_alloc)
  , dialogType(0)
  , initialText(_alloc)
  , titleColors(_alloc)
  , dialogColors(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _titleText_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  titleText;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mainText_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  mainText;

  typedef int32_t _dialogType_type;
  int32_t dialogType;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _initialText_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  initialText;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _titleColors_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  titleColors;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _dialogColors_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  dialogColors;


  typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosDisplayDialogRequest
typedef  ::vrep_common::simRosDisplayDialogRequest_<std::allocator<void> > simRosDisplayDialogRequest;

typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest> simRosDisplayDialogRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogRequest const> simRosDisplayDialogRequestConstPtr;


template <class ContainerAllocator>
struct simRosDisplayDialogResponse_ {
  typedef simRosDisplayDialogResponse_<ContainerAllocator> Type;

  simRosDisplayDialogResponse_()
  : dialogHandle(0)
  , uiHandle(0)
  {
  }

  simRosDisplayDialogResponse_(const ContainerAllocator& _alloc)
  : dialogHandle(0)
  , uiHandle(0)
  {
  }

  typedef int32_t _dialogHandle_type;
  int32_t dialogHandle;

  typedef int32_t _uiHandle_type;
  int32_t uiHandle;


  typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosDisplayDialogResponse
typedef  ::vrep_common::simRosDisplayDialogResponse_<std::allocator<void> > simRosDisplayDialogResponse;

typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogResponse> simRosDisplayDialogResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosDisplayDialogResponse const> simRosDisplayDialogResponseConstPtr;

struct simRosDisplayDialog
{

typedef simRosDisplayDialogRequest Request;
typedef simRosDisplayDialogResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosDisplayDialog
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f2ff91d637ffb37230ccc9727e2857e";
  }

  static const char* value(const  ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3f2ff91d637ffb37ULL;
  static const uint64_t static_value2 = 0x230ccc9727e2857eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosDisplayDialogRequest";
  }

  static const char* value(const  ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
string titleText\n\
string mainText\n\
int32 dialogType\n\
string initialText\n\
float32[] titleColors\n\
float32[] dialogColors\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ccb73bed17cccbeda47eabda11f7b01f";
  }

  static const char* value(const  ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xccb73bed17cccbedULL;
  static const uint64_t static_value2 = 0xa47eabda11f7b01fULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosDisplayDialogResponse";
  }

  static const char* value(const  ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 dialogHandle\n\
int32 uiHandle\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.titleText);
    stream.next(m.mainText);
    stream.next(m.dialogType);
    stream.next(m.initialText);
    stream.next(m.titleColors);
    stream.next(m.dialogColors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosDisplayDialogRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dialogHandle);
    stream.next(m.uiHandle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosDisplayDialogResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosDisplayDialog> {
  static const char* value() 
  {
    return "948197fff5a2d242998cebb95fb8cae1";
  }

  static const char* value(const vrep_common::simRosDisplayDialog&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosDisplayDialog> {
  static const char* value() 
  {
    return "vrep_common/simRosDisplayDialog";
  }

  static const char* value(const vrep_common::simRosDisplayDialog&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "948197fff5a2d242998cebb95fb8cae1";
  }

  static const char* value(const vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosDisplayDialog";
  }

  static const char* value(const vrep_common::simRosDisplayDialogRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "948197fff5a2d242998cebb95fb8cae1";
  }

  static const char* value(const vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosDisplayDialog";
  }

  static const char* value(const vrep_common::simRosDisplayDialogResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSDISPLAYDIALOG_H

