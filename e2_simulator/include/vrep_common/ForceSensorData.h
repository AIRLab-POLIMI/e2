/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/msg/ForceSensorData.msg */
#ifndef VREP_COMMON_MESSAGE_FORCESENSORDATA_H
#define VREP_COMMON_MESSAGE_FORCESENSORDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Int32.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace vrep_common
{
template <class ContainerAllocator>
struct ForceSensorData_ {
  typedef ForceSensorData_<ContainerAllocator> Type;

  ForceSensorData_()
  : sensorState()
  , force()
  , torque()
  {
  }

  ForceSensorData_(const ContainerAllocator& _alloc)
  : sensorState(_alloc)
  , force(_alloc)
  , torque(_alloc)
  {
  }

  typedef  ::std_msgs::Int32_<ContainerAllocator>  _sensorState_type;
   ::std_msgs::Int32_<ContainerAllocator>  sensorState;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _force_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  force;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _torque_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  torque;


  typedef boost::shared_ptr< ::vrep_common::ForceSensorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::ForceSensorData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ForceSensorData
typedef  ::vrep_common::ForceSensorData_<std::allocator<void> > ForceSensorData;

typedef boost::shared_ptr< ::vrep_common::ForceSensorData> ForceSensorDataPtr;
typedef boost::shared_ptr< ::vrep_common::ForceSensorData const> ForceSensorDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrep_common::ForceSensorData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrep_common::ForceSensorData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::ForceSensorData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::ForceSensorData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::ForceSensorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "975cc3fe659f11cb0dbd06416cff4a10";
  }

  static const char* value(const  ::vrep_common::ForceSensorData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x975cc3fe659f11cbULL;
  static const uint64_t static_value2 = 0x0dbd06416cff4a10ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::ForceSensorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/ForceSensorData";
  }

  static const char* value(const  ::vrep_common::ForceSensorData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::ForceSensorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Int32 sensorState\n\
geometry_msgs/Vector3 force\n\
geometry_msgs/Vector3 torque\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::vrep_common::ForceSensorData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::ForceSensorData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::ForceSensorData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sensorState);
    stream.next(m.force);
    stream.next(m.torque);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ForceSensorData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::ForceSensorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrep_common::ForceSensorData_<ContainerAllocator> & v) 
  {
    s << indent << "sensorState: ";
s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.sensorState);
    s << indent << "force: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
    s << indent << "torque: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.torque);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_FORCESENSORDATA_H

