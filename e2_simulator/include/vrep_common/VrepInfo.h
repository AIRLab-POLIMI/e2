/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/msg/VrepInfo.msg */
#ifndef VREP_COMMON_MESSAGE_VREPINFO_H
#define VREP_COMMON_MESSAGE_VREPINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "std_msgs/Int32.h"
#include "std_msgs/Float32.h"
#include "std_msgs/Float32.h"

namespace vrep_common
{
template <class ContainerAllocator>
struct VrepInfo_ {
  typedef VrepInfo_<ContainerAllocator> Type;

  VrepInfo_()
  : headerInfo()
  , simulatorState()
  , simulationTime()
  , timeStep()
  {
  }

  VrepInfo_(const ContainerAllocator& _alloc)
  : headerInfo(_alloc)
  , simulatorState(_alloc)
  , simulationTime(_alloc)
  , timeStep(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _headerInfo_type;
   ::std_msgs::Header_<ContainerAllocator>  headerInfo;

  typedef  ::std_msgs::Int32_<ContainerAllocator>  _simulatorState_type;
   ::std_msgs::Int32_<ContainerAllocator>  simulatorState;

  typedef  ::std_msgs::Float32_<ContainerAllocator>  _simulationTime_type;
   ::std_msgs::Float32_<ContainerAllocator>  simulationTime;

  typedef  ::std_msgs::Float32_<ContainerAllocator>  _timeStep_type;
   ::std_msgs::Float32_<ContainerAllocator>  timeStep;


  typedef boost::shared_ptr< ::vrep_common::VrepInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::VrepInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VrepInfo
typedef  ::vrep_common::VrepInfo_<std::allocator<void> > VrepInfo;

typedef boost::shared_ptr< ::vrep_common::VrepInfo> VrepInfoPtr;
typedef boost::shared_ptr< ::vrep_common::VrepInfo const> VrepInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vrep_common::VrepInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vrep_common::VrepInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::VrepInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::VrepInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::VrepInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66334ab2212d3c89226a89b7a37b2f95";
  }

  static const char* value(const  ::vrep_common::VrepInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x66334ab2212d3c89ULL;
  static const uint64_t static_value2 = 0x226a89b7a37b2f95ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::VrepInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/VrepInfo";
  }

  static const char* value(const  ::vrep_common::VrepInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::VrepInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Header headerInfo\n\
std_msgs/Int32 simulatorState\n\
std_msgs/Float32 simulationTime\n\
std_msgs/Float32 timeStep\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const  ::vrep_common::VrepInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::VrepInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.headerInfo);
    stream.next(m.simulatorState);
    stream.next(m.simulationTime);
    stream.next(m.timeStep);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VrepInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::VrepInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vrep_common::VrepInfo_<ContainerAllocator> & v) 
  {
    s << indent << "headerInfo: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.headerInfo);
    s << indent << "simulatorState: ";
s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.simulatorState);
    s << indent << "simulationTime: ";
s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.simulationTime);
    s << indent << "timeStep: ";
s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.timeStep);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_VREPINFO_H

