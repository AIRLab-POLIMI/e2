/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosEnableSubscriber.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSENABLESUBSCRIBER_H
#define VREP_COMMON_SERVICE_SIMROSENABLESUBSCRIBER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosEnableSubscriberRequest_ {
  typedef simRosEnableSubscriberRequest_<ContainerAllocator> Type;

  simRosEnableSubscriberRequest_()
  : topicName()
  , queueSize(0)
  , streamCmd(0)
  , auxInt1(0)
  , auxInt2(0)
  , auxString()
  {
  }

  simRosEnableSubscriberRequest_(const ContainerAllocator& _alloc)
  : topicName(_alloc)
  , queueSize(0)
  , streamCmd(0)
  , auxInt1(0)
  , auxInt2(0)
  , auxString(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topicName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topicName;

  typedef int32_t _queueSize_type;
  int32_t queueSize;

  typedef int32_t _streamCmd_type;
  int32_t streamCmd;

  typedef int32_t _auxInt1_type;
  int32_t auxInt1;

  typedef int32_t _auxInt2_type;
  int32_t auxInt2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _auxString_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  auxString;


  typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosEnableSubscriberRequest
typedef  ::vrep_common::simRosEnableSubscriberRequest_<std::allocator<void> > simRosEnableSubscriberRequest;

typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberRequest> simRosEnableSubscriberRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberRequest const> simRosEnableSubscriberRequestConstPtr;


template <class ContainerAllocator>
struct simRosEnableSubscriberResponse_ {
  typedef simRosEnableSubscriberResponse_<ContainerAllocator> Type;

  simRosEnableSubscriberResponse_()
  : subscriberID(0)
  {
  }

  simRosEnableSubscriberResponse_(const ContainerAllocator& _alloc)
  : subscriberID(0)
  {
  }

  typedef int32_t _subscriberID_type;
  int32_t subscriberID;


  typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosEnableSubscriberResponse
typedef  ::vrep_common::simRosEnableSubscriberResponse_<std::allocator<void> > simRosEnableSubscriberResponse;

typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberResponse> simRosEnableSubscriberResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosEnableSubscriberResponse const> simRosEnableSubscriberResponseConstPtr;

struct simRosEnableSubscriber
{

typedef simRosEnableSubscriberRequest Request;
typedef simRosEnableSubscriberResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosEnableSubscriber
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e7df7c248dc5801f9f5b98f61f3741b8";
  }

  static const char* value(const  ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe7df7c248dc5801fULL;
  static const uint64_t static_value2 = 0x9f5b98f61f3741b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosEnableSubscriberRequest";
  }

  static const char* value(const  ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
string topicName\n\
int32 queueSize\n\
int32 streamCmd\n\
int32 auxInt1\n\
int32 auxInt2\n\
string auxString\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "62d69ecf284a2ca70f446f9db0533ca8";
  }

  static const char* value(const  ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x62d69ecf284a2ca7ULL;
  static const uint64_t static_value2 = 0x0f446f9db0533ca8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosEnableSubscriberResponse";
  }

  static const char* value(const  ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 subscriberID\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topicName);
    stream.next(m.queueSize);
    stream.next(m.streamCmd);
    stream.next(m.auxInt1);
    stream.next(m.auxInt2);
    stream.next(m.auxString);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosEnableSubscriberRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.subscriberID);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosEnableSubscriberResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosEnableSubscriber> {
  static const char* value() 
  {
    return "61a23a6c623cfe11fb9eae842a1893b7";
  }

  static const char* value(const vrep_common::simRosEnableSubscriber&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosEnableSubscriber> {
  static const char* value() 
  {
    return "vrep_common/simRosEnableSubscriber";
  }

  static const char* value(const vrep_common::simRosEnableSubscriber&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "61a23a6c623cfe11fb9eae842a1893b7";
  }

  static const char* value(const vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosEnableSubscriber";
  }

  static const char* value(const vrep_common::simRosEnableSubscriberRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "61a23a6c623cfe11fb9eae842a1893b7";
  }

  static const char* value(const vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosEnableSubscriber";
  }

  static const char* value(const vrep_common::simRosEnableSubscriberResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSENABLESUBSCRIBER_H

