/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosLoadScene.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSLOADSCENE_H
#define VREP_COMMON_SERVICE_SIMROSLOADSCENE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosLoadSceneRequest_ {
  typedef simRosLoadSceneRequest_<ContainerAllocator> Type;

  simRosLoadSceneRequest_()
  : fileName()
  {
  }

  simRosLoadSceneRequest_(const ContainerAllocator& _alloc)
  : fileName(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  fileName;


  typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosLoadSceneRequest
typedef  ::vrep_common::simRosLoadSceneRequest_<std::allocator<void> > simRosLoadSceneRequest;

typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneRequest> simRosLoadSceneRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneRequest const> simRosLoadSceneRequestConstPtr;


template <class ContainerAllocator>
struct simRosLoadSceneResponse_ {
  typedef simRosLoadSceneResponse_<ContainerAllocator> Type;

  simRosLoadSceneResponse_()
  : result(0)
  {
  }

  simRosLoadSceneResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosLoadSceneResponse
typedef  ::vrep_common::simRosLoadSceneResponse_<std::allocator<void> > simRosLoadSceneResponse;

typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneResponse> simRosLoadSceneResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosLoadSceneResponse const> simRosLoadSceneResponseConstPtr;

struct simRosLoadScene
{

typedef simRosLoadSceneRequest Request;
typedef simRosLoadSceneResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosLoadScene
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c96d4662a80949a4927729271153923";
  }

  static const char* value(const  ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c96d4662a80949aULL;
  static const uint64_t static_value2 = 0x4927729271153923ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadSceneRequest";
  }

  static const char* value(const  ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
string fileName\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadSceneResponse";
  }

  static const char* value(const  ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosLoadSceneRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fileName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosLoadSceneRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosLoadSceneResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosLoadSceneResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosLoadScene> {
  static const char* value() 
  {
    return "4ce16c0ffb6dc4c97455e3e44d2010aa";
  }

  static const char* value(const vrep_common::simRosLoadScene&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosLoadScene> {
  static const char* value() 
  {
    return "vrep_common/simRosLoadScene";
  }

  static const char* value(const vrep_common::simRosLoadScene&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ce16c0ffb6dc4c97455e3e44d2010aa";
  }

  static const char* value(const vrep_common::simRosLoadSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosLoadSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadScene";
  }

  static const char* value(const vrep_common::simRosLoadSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ce16c0ffb6dc4c97455e3e44d2010aa";
  }

  static const char* value(const vrep_common::simRosLoadSceneResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosLoadSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadScene";
  }

  static const char* value(const vrep_common::simRosLoadSceneResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSLOADSCENE_H

