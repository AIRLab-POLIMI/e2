/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosGetUIEventButton.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSGETUIEVENTBUTTON_H
#define VREP_COMMON_SERVICE_SIMROSGETUIEVENTBUTTON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosGetUIEventButtonRequest_ {
  typedef simRosGetUIEventButtonRequest_<ContainerAllocator> Type;

  simRosGetUIEventButtonRequest_()
  : uiHandle(0)
  {
  }

  simRosGetUIEventButtonRequest_(const ContainerAllocator& _alloc)
  : uiHandle(0)
  {
  }

  typedef int32_t _uiHandle_type;
  int32_t uiHandle;


  typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetUIEventButtonRequest
typedef  ::vrep_common::simRosGetUIEventButtonRequest_<std::allocator<void> > simRosGetUIEventButtonRequest;

typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonRequest> simRosGetUIEventButtonRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonRequest const> simRosGetUIEventButtonRequestConstPtr;


template <class ContainerAllocator>
struct simRosGetUIEventButtonResponse_ {
  typedef simRosGetUIEventButtonResponse_<ContainerAllocator> Type;

  simRosGetUIEventButtonResponse_()
  : buttonID(0)
  , auxiliaryValues()
  {
  }

  simRosGetUIEventButtonResponse_(const ContainerAllocator& _alloc)
  : buttonID(0)
  , auxiliaryValues(_alloc)
  {
  }

  typedef int32_t _buttonID_type;
  int32_t buttonID;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _auxiliaryValues_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  auxiliaryValues;


  typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetUIEventButtonResponse
typedef  ::vrep_common::simRosGetUIEventButtonResponse_<std::allocator<void> > simRosGetUIEventButtonResponse;

typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonResponse> simRosGetUIEventButtonResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetUIEventButtonResponse const> simRosGetUIEventButtonResponseConstPtr;

struct simRosGetUIEventButton
{

typedef simRosGetUIEventButtonRequest Request;
typedef simRosGetUIEventButtonResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosGetUIEventButton
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66b6744fce66e25d77c762900fd5eb01";
  }

  static const char* value(const  ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x66b6744fce66e25dULL;
  static const uint64_t static_value2 = 0x77c762900fd5eb01ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetUIEventButtonRequest";
  }

  static const char* value(const  ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 uiHandle\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b728477dc7ef5ede0fdff50ce2320d21";
  }

  static const char* value(const  ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb728477dc7ef5edeULL;
  static const uint64_t static_value2 = 0x0fdff50ce2320d21ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetUIEventButtonResponse";
  }

  static const char* value(const  ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 buttonID\n\
int32[] auxiliaryValues\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.uiHandle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetUIEventButtonRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.buttonID);
    stream.next(m.auxiliaryValues);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetUIEventButtonResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosGetUIEventButton> {
  static const char* value() 
  {
    return "73f7d10c9f731ce35564b7e9b645aa25";
  }

  static const char* value(const vrep_common::simRosGetUIEventButton&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosGetUIEventButton> {
  static const char* value() 
  {
    return "vrep_common/simRosGetUIEventButton";
  }

  static const char* value(const vrep_common::simRosGetUIEventButton&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "73f7d10c9f731ce35564b7e9b645aa25";
  }

  static const char* value(const vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetUIEventButton";
  }

  static const char* value(const vrep_common::simRosGetUIEventButtonRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "73f7d10c9f731ce35564b7e9b645aa25";
  }

  static const char* value(const vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetUIEventButton";
  }

  static const char* value(const vrep_common::simRosGetUIEventButtonResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSGETUIEVENTBUTTON_H

