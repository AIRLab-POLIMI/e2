/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosLoadUI.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSLOADUI_H
#define VREP_COMMON_SERVICE_SIMROSLOADUI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosLoadUIRequest_ {
  typedef simRosLoadUIRequest_<ContainerAllocator> Type;

  simRosLoadUIRequest_()
  : fileName()
  {
  }

  simRosLoadUIRequest_(const ContainerAllocator& _alloc)
  : fileName(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fileName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  fileName;


  typedef boost::shared_ptr< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosLoadUIRequest
typedef  ::vrep_common::simRosLoadUIRequest_<std::allocator<void> > simRosLoadUIRequest;

typedef boost::shared_ptr< ::vrep_common::simRosLoadUIRequest> simRosLoadUIRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosLoadUIRequest const> simRosLoadUIRequestConstPtr;


template <class ContainerAllocator>
struct simRosLoadUIResponse_ {
  typedef simRosLoadUIResponse_<ContainerAllocator> Type;

  simRosLoadUIResponse_()
  : result(0)
  , uiHandles()
  {
  }

  simRosLoadUIResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , uiHandles(_alloc)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _uiHandles_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  uiHandles;


  typedef boost::shared_ptr< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosLoadUIResponse
typedef  ::vrep_common::simRosLoadUIResponse_<std::allocator<void> > simRosLoadUIResponse;

typedef boost::shared_ptr< ::vrep_common::simRosLoadUIResponse> simRosLoadUIResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosLoadUIResponse const> simRosLoadUIResponseConstPtr;

struct simRosLoadUI
{

typedef simRosLoadUIRequest Request;
typedef simRosLoadUIResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosLoadUI
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0c96d4662a80949a4927729271153923";
  }

  static const char* value(const  ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0c96d4662a80949aULL;
  static const uint64_t static_value2 = 0x4927729271153923ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadUIRequest";
  }

  static const char* value(const  ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
string fileName\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dbc9ef8fe09d5c1e08d19e5a63c8edb0";
  }

  static const char* value(const  ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdbc9ef8fe09d5c1eULL;
  static const uint64_t static_value2 = 0x08d19e5a63c8edb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadUIResponse";
  }

  static const char* value(const  ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
int32[] uiHandles\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosLoadUIRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.fileName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosLoadUIRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosLoadUIResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.uiHandles);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosLoadUIResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosLoadUI> {
  static const char* value() 
  {
    return "16005ff8dad636c8c963ce5d5ee0c3c1";
  }

  static const char* value(const vrep_common::simRosLoadUI&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosLoadUI> {
  static const char* value() 
  {
    return "vrep_common/simRosLoadUI";
  }

  static const char* value(const vrep_common::simRosLoadUI&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosLoadUIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "16005ff8dad636c8c963ce5d5ee0c3c1";
  }

  static const char* value(const vrep_common::simRosLoadUIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosLoadUIRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadUI";
  }

  static const char* value(const vrep_common::simRosLoadUIRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosLoadUIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "16005ff8dad636c8c963ce5d5ee0c3c1";
  }

  static const char* value(const vrep_common::simRosLoadUIResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosLoadUIResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosLoadUI";
  }

  static const char* value(const vrep_common::simRosLoadUIResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSLOADUI_H

