/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosReadProximitySensor.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSREADPROXIMITYSENSOR_H
#define VREP_COMMON_SERVICE_SIMROSREADPROXIMITYSENSOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosReadProximitySensorRequest_ {
  typedef simRosReadProximitySensorRequest_<ContainerAllocator> Type;

  simRosReadProximitySensorRequest_()
  : handle(0)
  {
  }

  simRosReadProximitySensorRequest_(const ContainerAllocator& _alloc)
  : handle(0)
  {
  }

  typedef int32_t _handle_type;
  int32_t handle;


  typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosReadProximitySensorRequest
typedef  ::vrep_common::simRosReadProximitySensorRequest_<std::allocator<void> > simRosReadProximitySensorRequest;

typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorRequest> simRosReadProximitySensorRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorRequest const> simRosReadProximitySensorRequestConstPtr;


template <class ContainerAllocator>
struct simRosReadProximitySensorResponse_ {
  typedef simRosReadProximitySensorResponse_<ContainerAllocator> Type;

  simRosReadProximitySensorResponse_()
  : result(0)
  , detectedPoint()
  , detectedObject(0)
  , normalVector()
  {
  }

  simRosReadProximitySensorResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , detectedPoint(_alloc)
  , detectedObject(0)
  , normalVector(_alloc)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _detectedPoint_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  detectedPoint;

  typedef int32_t _detectedObject_type;
  int32_t detectedObject;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _normalVector_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  normalVector;


  typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosReadProximitySensorResponse
typedef  ::vrep_common::simRosReadProximitySensorResponse_<std::allocator<void> > simRosReadProximitySensorResponse;

typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorResponse> simRosReadProximitySensorResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosReadProximitySensorResponse const> simRosReadProximitySensorResponseConstPtr;

struct simRosReadProximitySensor
{

typedef simRosReadProximitySensorRequest Request;
typedef simRosReadProximitySensorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosReadProximitySensor
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92535b678299d2bdda959704e78c275e";
  }

  static const char* value(const  ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92535b678299d2bdULL;
  static const uint64_t static_value2 = 0xda959704e78c275eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadProximitySensorRequest";
  }

  static const char* value(const  ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 handle\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d96957b6da2491c9e2ffcfcd60996ad";
  }

  static const char* value(const  ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d96957b6da2491cULL;
  static const uint64_t static_value2 = 0x9e2ffcfcd60996adULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadProximitySensorResponse";
  }

  static const char* value(const  ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
float32[] detectedPoint\n\
int32 detectedObject\n\
float32[] normalVector\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosReadProximitySensorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.detectedPoint);
    stream.next(m.detectedObject);
    stream.next(m.normalVector);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosReadProximitySensorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosReadProximitySensor> {
  static const char* value() 
  {
    return "05a1fa096e5ff4ba7072c60e22ef589e";
  }

  static const char* value(const vrep_common::simRosReadProximitySensor&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosReadProximitySensor> {
  static const char* value() 
  {
    return "vrep_common/simRosReadProximitySensor";
  }

  static const char* value(const vrep_common::simRosReadProximitySensor&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "05a1fa096e5ff4ba7072c60e22ef589e";
  }

  static const char* value(const vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadProximitySensor";
  }

  static const char* value(const vrep_common::simRosReadProximitySensorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "05a1fa096e5ff4ba7072c60e22ef589e";
  }

  static const char* value(const vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadProximitySensor";
  }

  static const char* value(const vrep_common::simRosReadProximitySensorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSREADPROXIMITYSENSOR_H

