/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosGetObjectPose.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSGETOBJECTPOSE_H
#define VREP_COMMON_SERVICE_SIMROSGETOBJECTPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/PoseStamped.h"

namespace vrep_common
{
template <class ContainerAllocator>
struct simRosGetObjectPoseRequest_ {
  typedef simRosGetObjectPoseRequest_<ContainerAllocator> Type;

  simRosGetObjectPoseRequest_()
  : handle(0)
  , relativeToObjectHandle(0)
  {
  }

  simRosGetObjectPoseRequest_(const ContainerAllocator& _alloc)
  : handle(0)
  , relativeToObjectHandle(0)
  {
  }

  typedef int32_t _handle_type;
  int32_t handle;

  typedef int32_t _relativeToObjectHandle_type;
  int32_t relativeToObjectHandle;


  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetObjectPoseRequest
typedef  ::vrep_common::simRosGetObjectPoseRequest_<std::allocator<void> > simRosGetObjectPoseRequest;

typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseRequest> simRosGetObjectPoseRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseRequest const> simRosGetObjectPoseRequestConstPtr;


template <class ContainerAllocator>
struct simRosGetObjectPoseResponse_ {
  typedef simRosGetObjectPoseResponse_<ContainerAllocator> Type;

  simRosGetObjectPoseResponse_()
  : result(0)
  , pose()
  {
  }

  simRosGetObjectPoseResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , pose(_alloc)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetObjectPoseResponse
typedef  ::vrep_common::simRosGetObjectPoseResponse_<std::allocator<void> > simRosGetObjectPoseResponse;

typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseResponse> simRosGetObjectPoseResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetObjectPoseResponse const> simRosGetObjectPoseResponseConstPtr;

struct simRosGetObjectPose
{

typedef simRosGetObjectPoseRequest Request;
typedef simRosGetObjectPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosGetObjectPose
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f089c181599d2dcbd1172f3eff51abb2";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf089c181599d2dcbULL;
  static const uint64_t static_value2 = 0xd1172f3eff51abb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectPoseRequest";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 handle\n\
int32 relativeToObjectHandle\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beb984372af50548a529c62446caa7d8";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbeb984372af50548ULL;
  static const uint64_t static_value2 = 0xa529c62446caa7d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectPoseResponse";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
geometry_msgs/PoseStamped pose\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
    stream.next(m.relativeToObjectHandle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetObjectPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetObjectPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosGetObjectPose> {
  static const char* value() 
  {
    return "dcc153fe8e4754d793983e414eb1b664";
  }

  static const char* value(const vrep_common::simRosGetObjectPose&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosGetObjectPose> {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectPose";
  }

  static const char* value(const vrep_common::simRosGetObjectPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dcc153fe8e4754d793983e414eb1b664";
  }

  static const char* value(const vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectPose";
  }

  static const char* value(const vrep_common::simRosGetObjectPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dcc153fe8e4754d793983e414eb1b664";
  }

  static const char* value(const vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetObjectPose";
  }

  static const char* value(const vrep_common::simRosGetObjectPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSGETOBJECTPOSE_H

