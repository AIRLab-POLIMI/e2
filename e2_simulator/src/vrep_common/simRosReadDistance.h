/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosReadDistance.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSREADDISTANCE_H
#define VREP_COMMON_SERVICE_SIMROSREADDISTANCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosReadDistanceRequest_ {
  typedef simRosReadDistanceRequest_<ContainerAllocator> Type;

  simRosReadDistanceRequest_()
  : handle(0)
  {
  }

  simRosReadDistanceRequest_(const ContainerAllocator& _alloc)
  : handle(0)
  {
  }

  typedef int32_t _handle_type;
  int32_t handle;


  typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosReadDistanceRequest
typedef  ::vrep_common::simRosReadDistanceRequest_<std::allocator<void> > simRosReadDistanceRequest;

typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceRequest> simRosReadDistanceRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceRequest const> simRosReadDistanceRequestConstPtr;


template <class ContainerAllocator>
struct simRosReadDistanceResponse_ {
  typedef simRosReadDistanceResponse_<ContainerAllocator> Type;

  simRosReadDistanceResponse_()
  : result(0)
  , distance(0.0)
  {
  }

  simRosReadDistanceResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , distance(0.0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef float _distance_type;
  float distance;


  typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosReadDistanceResponse
typedef  ::vrep_common::simRosReadDistanceResponse_<std::allocator<void> > simRosReadDistanceResponse;

typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceResponse> simRosReadDistanceResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosReadDistanceResponse const> simRosReadDistanceResponseConstPtr;

struct simRosReadDistance
{

typedef simRosReadDistanceRequest Request;
typedef simRosReadDistanceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosReadDistance
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92535b678299d2bdda959704e78c275e";
  }

  static const char* value(const  ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92535b678299d2bdULL;
  static const uint64_t static_value2 = 0xda959704e78c275eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadDistanceRequest";
  }

  static const char* value(const  ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 handle\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5d04a72250553841153bb8b6a483569b";
  }

  static const char* value(const  ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5d04a72250553841ULL;
  static const uint64_t static_value2 = 0x153bb8b6a483569bULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadDistanceResponse";
  }

  static const char* value(const  ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
float32 distance\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosReadDistanceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosReadDistanceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosReadDistanceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.distance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosReadDistanceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosReadDistance> {
  static const char* value() 
  {
    return "099258cb82ad99c080c59f94344f9f24";
  }

  static const char* value(const vrep_common::simRosReadDistance&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosReadDistance> {
  static const char* value() 
  {
    return "vrep_common/simRosReadDistance";
  }

  static const char* value(const vrep_common::simRosReadDistance&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "099258cb82ad99c080c59f94344f9f24";
  }

  static const char* value(const vrep_common::simRosReadDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosReadDistanceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadDistance";
  }

  static const char* value(const vrep_common::simRosReadDistanceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "099258cb82ad99c080c59f94344f9f24";
  }

  static const char* value(const vrep_common::simRosReadDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosReadDistanceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosReadDistance";
  }

  static const char* value(const vrep_common::simRosReadDistanceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSREADDISTANCE_H

