/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosCloseScene.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSCLOSESCENE_H
#define VREP_COMMON_SERVICE_SIMROSCLOSESCENE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosCloseSceneRequest_ {
  typedef simRosCloseSceneRequest_<ContainerAllocator> Type;

  simRosCloseSceneRequest_()
  {
  }

  simRosCloseSceneRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosCloseSceneRequest
typedef  ::vrep_common::simRosCloseSceneRequest_<std::allocator<void> > simRosCloseSceneRequest;

typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneRequest> simRosCloseSceneRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneRequest const> simRosCloseSceneRequestConstPtr;


template <class ContainerAllocator>
struct simRosCloseSceneResponse_ {
  typedef simRosCloseSceneResponse_<ContainerAllocator> Type;

  simRosCloseSceneResponse_()
  : result(0)
  {
  }

  simRosCloseSceneResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosCloseSceneResponse
typedef  ::vrep_common::simRosCloseSceneResponse_<std::allocator<void> > simRosCloseSceneResponse;

typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneResponse> simRosCloseSceneResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosCloseSceneResponse const> simRosCloseSceneResponseConstPtr;

struct simRosCloseScene
{

typedef simRosCloseSceneRequest Request;
typedef simRosCloseSceneResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosCloseScene
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCloseSceneRequest";
  }

  static const char* value(const  ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCloseSceneResponse";
  }

  static const char* value(const  ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosCloseSceneRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosCloseSceneRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosCloseSceneResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosCloseSceneResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosCloseScene> {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const vrep_common::simRosCloseScene&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosCloseScene> {
  static const char* value() 
  {
    return "vrep_common/simRosCloseScene";
  }

  static const char* value(const vrep_common::simRosCloseScene&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const vrep_common::simRosCloseSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosCloseSceneRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCloseScene";
  }

  static const char* value(const vrep_common::simRosCloseSceneRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const vrep_common::simRosCloseSceneResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosCloseSceneResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosCloseScene";
  }

  static const char* value(const vrep_common::simRosCloseSceneResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSCLOSESCENE_H

