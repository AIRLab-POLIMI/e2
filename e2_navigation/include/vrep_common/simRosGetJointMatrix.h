/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosGetJointMatrix.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSGETJOINTMATRIX_H
#define VREP_COMMON_SERVICE_SIMROSGETJOINTMATRIX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/TransformStamped.h"

namespace vrep_common
{
template <class ContainerAllocator>
struct simRosGetJointMatrixRequest_ {
  typedef simRosGetJointMatrixRequest_<ContainerAllocator> Type;

  simRosGetJointMatrixRequest_()
  : handle(0)
  {
  }

  simRosGetJointMatrixRequest_(const ContainerAllocator& _alloc)
  : handle(0)
  {
  }

  typedef int32_t _handle_type;
  int32_t handle;


  typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetJointMatrixRequest
typedef  ::vrep_common::simRosGetJointMatrixRequest_<std::allocator<void> > simRosGetJointMatrixRequest;

typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixRequest> simRosGetJointMatrixRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixRequest const> simRosGetJointMatrixRequestConstPtr;


template <class ContainerAllocator>
struct simRosGetJointMatrixResponse_ {
  typedef simRosGetJointMatrixResponse_<ContainerAllocator> Type;

  simRosGetJointMatrixResponse_()
  : result(0)
  , transform()
  {
  }

  simRosGetJointMatrixResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , transform(_alloc)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _transform_type;
   ::geometry_msgs::TransformStamped_<ContainerAllocator>  transform;


  typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetJointMatrixResponse
typedef  ::vrep_common::simRosGetJointMatrixResponse_<std::allocator<void> > simRosGetJointMatrixResponse;

typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixResponse> simRosGetJointMatrixResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetJointMatrixResponse const> simRosGetJointMatrixResponseConstPtr;

struct simRosGetJointMatrix
{

typedef simRosGetJointMatrixRequest Request;
typedef simRosGetJointMatrixResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosGetJointMatrix
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92535b678299d2bdda959704e78c275e";
  }

  static const char* value(const  ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92535b678299d2bdULL;
  static const uint64_t static_value2 = 0xda959704e78c275eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetJointMatrixRequest";
  }

  static const char* value(const  ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 handle\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ea4c0896312fb5454e09fdc654d37fab";
  }

  static const char* value(const  ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xea4c0896312fb545ULL;
  static const uint64_t static_value2 = 0x4e09fdc654d37fabULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetJointMatrixResponse";
  }

  static const char* value(const  ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
geometry_msgs/TransformStamped transform\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TransformStamped\n\
# This expresses a transform from coordinate frame header.frame_id\n\
# to the coordinate frame child_frame_id\n\
#\n\
# This message is mostly used by the \n\
# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. \n\
# See its documentation for more information.\n\
\n\
Header header\n\
string child_frame_id # the frame id of the child frame\n\
Transform transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetJointMatrixRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.transform);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetJointMatrixResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosGetJointMatrix> {
  static const char* value() 
  {
    return "a4cf19b442f7dd0e7c71aebcc49e75d2";
  }

  static const char* value(const vrep_common::simRosGetJointMatrix&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosGetJointMatrix> {
  static const char* value() 
  {
    return "vrep_common/simRosGetJointMatrix";
  }

  static const char* value(const vrep_common::simRosGetJointMatrix&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4cf19b442f7dd0e7c71aebcc49e75d2";
  }

  static const char* value(const vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetJointMatrix";
  }

  static const char* value(const vrep_common::simRosGetJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a4cf19b442f7dd0e7c71aebcc49e75d2";
  }

  static const char* value(const vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetJointMatrix";
  }

  static const char* value(const vrep_common::simRosGetJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSGETJOINTMATRIX_H

