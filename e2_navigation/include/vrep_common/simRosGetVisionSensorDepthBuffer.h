/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosGetVisionSensorDepthBuffer.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSGETVISIONSENSORDEPTHBUFFER_H
#define VREP_COMMON_SERVICE_SIMROSGETVISIONSENSORDEPTHBUFFER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace vrep_common
{
template <class ContainerAllocator>
struct simRosGetVisionSensorDepthBufferRequest_ {
  typedef simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> Type;

  simRosGetVisionSensorDepthBufferRequest_()
  : handle(0)
  {
  }

  simRosGetVisionSensorDepthBufferRequest_(const ContainerAllocator& _alloc)
  : handle(0)
  {
  }

  typedef int32_t _handle_type;
  int32_t handle;


  typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetVisionSensorDepthBufferRequest
typedef  ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<std::allocator<void> > simRosGetVisionSensorDepthBufferRequest;

typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferRequest> simRosGetVisionSensorDepthBufferRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferRequest const> simRosGetVisionSensorDepthBufferRequestConstPtr;


template <class ContainerAllocator>
struct simRosGetVisionSensorDepthBufferResponse_ {
  typedef simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> Type;

  simRosGetVisionSensorDepthBufferResponse_()
  : result(0)
  , resolution()
  , buffer()
  {
  }

  simRosGetVisionSensorDepthBufferResponse_(const ContainerAllocator& _alloc)
  : result(0)
  , resolution(_alloc)
  , buffer(_alloc)
  {
  }

  typedef int32_t _result_type;
  int32_t result;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _resolution_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  resolution;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _buffer_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  buffer;


  typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosGetVisionSensorDepthBufferResponse
typedef  ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<std::allocator<void> > simRosGetVisionSensorDepthBufferResponse;

typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferResponse> simRosGetVisionSensorDepthBufferResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosGetVisionSensorDepthBufferResponse const> simRosGetVisionSensorDepthBufferResponseConstPtr;

struct simRosGetVisionSensorDepthBuffer
{

typedef simRosGetVisionSensorDepthBufferRequest Request;
typedef simRosGetVisionSensorDepthBufferResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosGetVisionSensorDepthBuffer
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92535b678299d2bdda959704e78c275e";
  }

  static const char* value(const  ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92535b678299d2bdULL;
  static const uint64_t static_value2 = 0xda959704e78c275eULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetVisionSensorDepthBufferRequest";
  }

  static const char* value(const  ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 handle\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3b6a80ea60fe51df97a2b740bd21976";
  }

  static const char* value(const  ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3b6a80ea60fe51dULL;
  static const uint64_t static_value2 = 0xf97a2b740bd21976ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetVisionSensorDepthBufferResponse";
  }

  static const char* value(const  ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
int32[] resolution\n\
float32[] buffer\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetVisionSensorDepthBufferRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.resolution);
    stream.next(m.buffer);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosGetVisionSensorDepthBufferResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosGetVisionSensorDepthBuffer> {
  static const char* value() 
  {
    return "4ba1b459e0a6f0de6bdb7a5376ec08af";
  }

  static const char* value(const vrep_common::simRosGetVisionSensorDepthBuffer&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosGetVisionSensorDepthBuffer> {
  static const char* value() 
  {
    return "vrep_common/simRosGetVisionSensorDepthBuffer";
  }

  static const char* value(const vrep_common::simRosGetVisionSensorDepthBuffer&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ba1b459e0a6f0de6bdb7a5376ec08af";
  }

  static const char* value(const vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetVisionSensorDepthBuffer";
  }

  static const char* value(const vrep_common::simRosGetVisionSensorDepthBufferRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ba1b459e0a6f0de6bdb7a5376ec08af";
  }

  static const char* value(const vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosGetVisionSensorDepthBuffer";
  }

  static const char* value(const vrep_common::simRosGetVisionSensorDepthBufferResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSGETVISIONSENSORDEPTHBUFFER_H

