/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/vrep/vrep_common/srv/simRosSetSphericalJointMatrix.srv */
#ifndef VREP_COMMON_SERVICE_SIMROSSETSPHERICALJOINTMATRIX_H
#define VREP_COMMON_SERVICE_SIMROSSETSPHERICALJOINTMATRIX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Quaternion.h"



namespace vrep_common
{
template <class ContainerAllocator>
struct simRosSetSphericalJointMatrixRequest_ {
  typedef simRosSetSphericalJointMatrixRequest_<ContainerAllocator> Type;

  simRosSetSphericalJointMatrixRequest_()
  : handle(0)
  , quaternion()
  {
  }

  simRosSetSphericalJointMatrixRequest_(const ContainerAllocator& _alloc)
  : handle(0)
  , quaternion(_alloc)
  {
  }

  typedef int32_t _handle_type;
  int32_t handle;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quaternion_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  quaternion;


  typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosSetSphericalJointMatrixRequest
typedef  ::vrep_common::simRosSetSphericalJointMatrixRequest_<std::allocator<void> > simRosSetSphericalJointMatrixRequest;

typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixRequest> simRosSetSphericalJointMatrixRequestPtr;
typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixRequest const> simRosSetSphericalJointMatrixRequestConstPtr;


template <class ContainerAllocator>
struct simRosSetSphericalJointMatrixResponse_ {
  typedef simRosSetSphericalJointMatrixResponse_<ContainerAllocator> Type;

  simRosSetSphericalJointMatrixResponse_()
  : result(0)
  {
  }

  simRosSetSphericalJointMatrixResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct simRosSetSphericalJointMatrixResponse
typedef  ::vrep_common::simRosSetSphericalJointMatrixResponse_<std::allocator<void> > simRosSetSphericalJointMatrixResponse;

typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixResponse> simRosSetSphericalJointMatrixResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosSetSphericalJointMatrixResponse const> simRosSetSphericalJointMatrixResponseConstPtr;

struct simRosSetSphericalJointMatrix
{

typedef simRosSetSphericalJointMatrixRequest Request;
typedef simRosSetSphericalJointMatrixResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct simRosSetSphericalJointMatrix
} // namespace vrep_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b50ec6d9c510b5022a5f97f224455526";
  }

  static const char* value(const  ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb50ec6d9c510b502ULL;
  static const uint64_t static_value2 = 0x2a5f97f224455526ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetSphericalJointMatrixRequest";
  }

  static const char* value(const  ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
int32 handle\n\
geometry_msgs/Quaternion quaternion\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetSphericalJointMatrixResponse";
  }

  static const char* value(const  ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
    stream.next(m.quaternion);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosSetSphericalJointMatrixRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct simRosSetSphericalJointMatrixResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<vrep_common::simRosSetSphericalJointMatrix> {
  static const char* value() 
  {
    return "ff6022ac5ed35d4a73c1ed756bc036db";
  }

  static const char* value(const vrep_common::simRosSetSphericalJointMatrix&) { return value(); } 
};

template<>
struct DataType<vrep_common::simRosSetSphericalJointMatrix> {
  static const char* value() 
  {
    return "vrep_common/simRosSetSphericalJointMatrix";
  }

  static const char* value(const vrep_common::simRosSetSphericalJointMatrix&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff6022ac5ed35d4a73c1ed756bc036db";
  }

  static const char* value(const vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetSphericalJointMatrix";
  }

  static const char* value(const vrep_common::simRosSetSphericalJointMatrixRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ff6022ac5ed35d4a73c1ed756bc036db";
  }

  static const char* value(const vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vrep_common/simRosSetSphericalJointMatrix";
  }

  static const char* value(const vrep_common::simRosSetSphericalJointMatrixResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // VREP_COMMON_SERVICE_SIMROSSETSPHERICALJOINTMATRIX_H

