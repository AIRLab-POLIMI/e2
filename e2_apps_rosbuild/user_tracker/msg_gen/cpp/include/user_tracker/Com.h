/* Auto-generated by genmsg_cpp for file /home/jackal/ros_workspace/src/e2/e2_apps_rosbuild/user_tracker/msg/Com.msg */
#ifndef USER_TRACKER_MESSAGE_COM_H
#define USER_TRACKER_MESSAGE_COM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"
#include "std_msgs/Int32.h"

namespace user_tracker
{
template <class ContainerAllocator>
struct Com_ {
  typedef Com_<ContainerAllocator> Type;

  Com_()
  : header()
  , comPoints()
  , headPoint()
  , distanceThreshold()
  {
  }

  Com_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , comPoints(_alloc)
  , headPoint(_alloc)
  , distanceThreshold(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _comPoints_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  comPoints;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _headPoint_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  headPoint;

  typedef  ::std_msgs::Int32_<ContainerAllocator>  _distanceThreshold_type;
   ::std_msgs::Int32_<ContainerAllocator>  distanceThreshold;


  typedef boost::shared_ptr< ::user_tracker::Com_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::user_tracker::Com_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Com
typedef  ::user_tracker::Com_<std::allocator<void> > Com;

typedef boost::shared_ptr< ::user_tracker::Com> ComPtr;
typedef boost::shared_ptr< ::user_tracker::Com const> ComConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::user_tracker::Com_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::user_tracker::Com_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace user_tracker

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::user_tracker::Com_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::user_tracker::Com_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::user_tracker::Com_<ContainerAllocator> > {
  static const char* value() 
  {
    return "203b33db4f4a438ecfb86d49899a8f2e";
  }

  static const char* value(const  ::user_tracker::Com_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x203b33db4f4a438eULL;
  static const uint64_t static_value2 = 0xcfb86d49899a8f2eULL;
};

template<class ContainerAllocator>
struct DataType< ::user_tracker::Com_<ContainerAllocator> > {
  static const char* value() 
  {
    return "user_tracker/Com";
  }

  static const char* value(const  ::user_tracker::Com_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::user_tracker::Com_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Point32 comPoints\n\
geometry_msgs/Point32 headPoint\n\
std_msgs/Int32 distanceThreshold\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const  ::user_tracker::Com_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::user_tracker::Com_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::user_tracker::Com_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::user_tracker::Com_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.comPoints);
    stream.next(m.headPoint);
    stream.next(m.distanceThreshold);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Com_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::user_tracker::Com_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::user_tracker::Com_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "comPoints: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.comPoints);
    s << indent << "headPoint: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.headPoint);
    s << indent << "distanceThreshold: ";
s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.distanceThreshold);
  }
};


} // namespace message_operations
} // namespace ros

#endif // USER_TRACKER_MESSAGE_COM_H

